import React from "react";
import { render, fireEvent, waitFor } from "@testing-library/react-native";
import ProfileScreen from "../../../screens/Auth/ProfileScreen";
import { Alert } from "react-native";
import { AuthContext } from "../../../src/contexts/AuthContext";

// Mock navigation (d√πng cho test back, sign up n·∫øu c√≥)
const mockNavigate = jest.fn();
const mockGoBack = jest.fn();
jest.mock("@react-navigation/native", () => ({
  useNavigation: () => ({
    navigate: mockNavigate,
    goBack: mockGoBack,
  }),
}));

// Mock AsyncStorage & Ionicons ƒë·ªÉ tr√°nh c·∫£nh b√°o act(...)
jest.mock("@react-native-async-storage/async-storage", () =>
  require("@react-native-async-storage/async-storage/jest/async-storage-mock")
);
jest.mock("react-native-vector-icons/Ionicons", () => "Ionicons");

// Mock services
const mockGetMe = jest.fn();
const mockLogout = jest.fn();
const mockLogin = jest.fn();
jest.mock("../../../services/auth.service", () => ({
  AuthService: {
    getMe: (...args: any[]) => mockGetMe(...args),
    logout: (...args: any[]) => mockLogout(...args),
    login: (...args: any[]) => mockLogin(...args),
  },
}));

const mockGetRoleByUserId = jest.fn();
const mockUpdateUser = jest.fn();
jest.mock("../../../services/user.service", () => ({
  UserService: {
    getRoleByUserId: (...args: any[]) => mockGetRoleByUserId(...args),
    update: (...args: any[]) => mockUpdateUser(...args),
  },
}));

jest.spyOn(Alert, "alert").mockImplementation(() => {});

// Helper: render k√®m AuthContext
function renderWithAuth(
  ui: React.ReactNode,
  ctx = { isLoggedIn: true, setLoggedIn: jest.fn() }
) {
  return {
    ...render(<AuthContext.Provider value={ctx as any}>{ui}</AuthContext.Provider>),
    ctx,
  };
}

describe("Ki·ªÉm th·ª≠ m√†n h√¨nh ProfileScreen", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("G·ªçi fetchUserInfo v√† hi·ªÉn th·ªã th√¥ng tin user + role", async () => {
    mockGetMe.mockResolvedValueOnce({
      user_id: 1,
      name: "Nguyen Van A",
      email: "a@example.com",
    });
    mockGetRoleByUserId.mockResolvedValueOnce({ role: "Admin" });

    const { getByText } = renderWithAuth(<ProfileScreen />);

    await waitFor(() => {
      expect(mockGetMe).toHaveBeenCalled();
      expect(mockGetRoleByUserId).toHaveBeenCalledWith(1);
      expect(getByText(/Nguyen Van A/i)).toBeTruthy();
      expect(getByText(/üìßEmail: a@example.com/i)).toBeTruthy();
      expect(getByText(/üéì Vai tr√≤: Admin/i)).toBeTruthy();
    });
  });

  it("Hi·ªÉn th·ªã th√¥ng b√°o khi fetchUserInfo th·∫•t b·∫°i", async () => {
    mockGetMe.mockRejectedValueOnce({});

    renderWithAuth(<ProfileScreen />);

    await waitFor(() => {
      expect(Alert.alert).toHaveBeenCalledWith(
        "L·ªói",
        "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng"
      );
    });
  });

  it("ƒêƒÉng xu·∫•t th√†nh c√¥ng v√† chuy·ªÉn sang nh√°nh Login (setLoggedIn(false))", async () => {
    mockGetMe.mockResolvedValueOnce({ user_id: 1, name: "A", email: "a@a.com" });
    mockGetRoleByUserId.mockResolvedValueOnce({ role: "Admin" });
    mockLogout.mockResolvedValueOnce(undefined);

    const { getByText, ctx } = renderWithAuth(<ProfileScreen />, {
      isLoggedIn: true,
      setLoggedIn: jest.fn(),
    });

    await waitFor(() => {}); // ƒë·ª£i m√†n h√¨nh load xong

    fireEvent.press(getByText("ƒêƒÉng xu·∫•t"));

    await waitFor(() => {
      expect(mockLogout).toHaveBeenCalled();
      // N·∫øu component c√≥ Alert khi logout, gi·ªØ d√≤ng d∆∞·ªõi; n·∫øu kh√¥ng th√¨ b·ªè:
      // expect(Alert.alert).toHaveBeenCalledWith("Th√¥ng b√°o", "B·∫°n ƒë√£ ƒëƒÉng xu·∫•t");
      expect(ctx.setLoggedIn).toHaveBeenCalledWith(false); // ‚úÖ quan tr·ªçng
    });

    // Kh√¥ng c√≤n ki·ªÉm tra navigate("Login") v√¨ AppNavigator s·∫Ω t·ª± render nh√°nh Login
  });

  it("C·∫≠p nh·∫≠t th√¥ng tin user th√†nh c√¥ng", async () => {
    mockGetMe.mockResolvedValueOnce({
      user_id: 1,
      name: "Nguyen Van A",
      email: "a@example.com",
    });
    mockGetRoleByUserId.mockResolvedValueOnce({ role: "Admin" });
    mockUpdateUser.mockResolvedValueOnce({});

    const { getByText } = renderWithAuth(<ProfileScreen />);
    await waitFor(() => {});

    fireEvent.press(getByText("C·∫≠p nh·∫≠t th√¥ng tin"));
    fireEvent.press(getByText("L∆∞u"));

    await waitFor(() => {
      expect(mockUpdateUser).toHaveBeenCalled();
      expect(Alert.alert).toHaveBeenCalledWith(
        "Th√†nh c√¥ng",
        "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng"
      );
    });
  });

  it("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng", async () => {
    mockGetMe.mockResolvedValueOnce({
      user_id: 1,
      name: "Nguyen Van A",
      email: "a@example.com",
    });
    mockGetRoleByUserId.mockResolvedValueOnce({ role: "Admin" });
    mockLogin.mockResolvedValueOnce({}); // login ƒë·ªÉ x√°c nh·∫≠n m·∫≠t kh·∫©u c≈©
    mockUpdateUser.mockResolvedValueOnce({}); // c·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi

    const { getByText, getByPlaceholderText } = renderWithAuth(<ProfileScreen />);
    await waitFor(() => {});

    fireEvent.press(getByText("ƒê·ªïi m·∫≠t kh·∫©u"));
    fireEvent.changeText(getByPlaceholderText("Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i"), "oldpass");
    fireEvent.changeText(getByPlaceholderText("Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"), "newpass");
    fireEvent.changeText(getByPlaceholderText("X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi"), "newpass");
    fireEvent.press(getByText("L∆∞u"));

    await waitFor(() => {
      expect(mockLogin).toHaveBeenCalledWith("a@example.com", "oldpass");
      expect(mockUpdateUser).toHaveBeenCalledWith(1, { password: "newpass" });
      expect(Alert.alert).toHaveBeenCalledWith(
        "Th√†nh c√¥ng",
        "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi"
      );
    });
  });

  it("Quay l·∫°i m√†n h√¨nh tr∆∞·ªõc khi b·∫•m n√∫t Back", async () => {
    mockGetMe.mockResolvedValueOnce({
      user_id: 1,
      name: "Nguyen Van A",
      email: "a@example.com",
    });
    mockGetRoleByUserId.mockResolvedValueOnce({ role: "Admin" });

    const { getByLabelText } = renderWithAuth(<ProfileScreen />);
    await waitFor(() => {});

    const backButton = getByLabelText("back-button");
    fireEvent.press(backButton);
    expect(mockGoBack).toHaveBeenCalled();
  });
});
